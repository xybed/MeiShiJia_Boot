简单工厂模式

介绍：简单工厂模式又称为静态工厂方法模式，因为在工厂类中，用于创建实例的方法是静态方法，所以简单工厂模式又被称为静态工厂方法模式。
但简单工厂模式不属于设计模式的一种，但在软件开发中应用也较为频繁，通常将它作为学习其他工厂模式的入门。

概念：定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常都具有共同的父类。

核心：
Factory（工厂角色）
工厂角色即工厂类，它是简单工厂模式的核心，负责实现创建所有产品实例的内部逻辑；
工厂类可以被外界直接调用，创建所需的产品对象；
在工厂类中提供了静态的工厂方法，返回类型为抽象产品类型。
--------------------------------------------------------------------------
Product（抽象产品角色）
工厂类所创建的所有对象的父类，封装了各种产品对象的公有方法，它的引入将提高系统的灵活性，
使得在工厂类中只需定义一个通用的工厂方法，因为所有创建的具体产品对象都是其子类对象。
--------------------------------------------------------------------------
ConcreteProduct（具体产品角色）
简单工厂模式的创建目标，所有被创建的对象都充当这个角色的某个具体类的实例。
每一个具体产品角色都继承了抽象产品角色，需要实现在抽象产品中声明的抽象方法。

使用场景
工厂类负责创建的对象比较少。
客户端只知道传入工厂类的参数，对于如何创建对象并不关心。
无须直接使用new关键字来创建对象。

总结一把
简单工厂模式的主要优点如下：
客户端可以免除直接创建对象的职责，只关心使用对象，简单工厂模式实现了对象创建和使用的分离。
客户端不用知道创建的产品类具体类名，只要知道具体产品类所对应的参数即可。
通过配置文件，提高了系统灵活性。
---------------------------------------------------------------------------
简单工厂模式的主要缺点如下：
工厂类负责所有对象的创建逻辑，该类出问题整个系统挂掉。
系统扩展困难，一旦添加新产品就不得不修改工厂逻辑。
简单工厂模式由于使用了静态工厂方法，所以工厂角色无法形成基于继承的等级结构。

