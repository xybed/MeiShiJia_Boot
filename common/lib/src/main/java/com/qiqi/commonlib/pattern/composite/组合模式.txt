组合模式

概述
组合模式又叫做部分-整体模式，使我们在树型结构的问题中模糊简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂的元素，从而使得客户程序与复杂元素的内部结构解耦。
组合模式可以优化处理递归或分级数据结构。有许多关于分级数据结构的例子，使得组合模式非常有用武之地。

概念：组合多个对象形成树形结构以表示具有“整体—部分”关系的层次结构。
组合模式对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性，组合模式又可以称为“整体—部分”(Part-Whole)模式，它是一种对象结构型模式。

核心：
抽象构件（Component）
组合中的对象声明接口，在适当的情况下实现所有类共有接口的默认行为。声明一个接口用于访问和管理Component子部件。
-----------------------------------------------------------------
树叶构件（Leaf）
在组合中表示树的叶子结点对象，叶子结点没有子结点。
-----------------------------------------------------------------
容器构件（Composite）
定义有枝节点的部件，在Component接口中实现与子部件有关操作，如增加(add)和删除(remove)等。

组合模式的关键是定义一个抽象构件类，它既可以代表Leaf，又可以代表Composite，而客户端针对该抽象构件类进行编程，无须知道它到底表示的是叶子还是容器，
可以对其进行统一处理。同时容器对象与抽象构件类之间还建立一个聚合关联关系，在容器对象中既可以包含叶子，也可以包含容器，以此实现递归组合，形成一个树形结构。

使用场景
在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，客户端可以一致地对待它们。
在一个使用面向对象语言开发的系统中需要处理一个树形结构。
在一个系统中能够分离出叶子对象和容器对象，而且它们的类型不固定，需要增加一些新的类型。

总结一把
组合模式优点如下：
组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。
客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。
在组合模式中增加新的容器构件和叶子构件都很方便，无须对现有类库进行任何修改，符合“开闭原则”。
组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子对象和容器对象的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。
-----------------------------------------------------------------
组合模式缺点如下：
在增加新构件时很难对容器中的构件类型进行限制。有时候我们希望一个容器中只能有某些特定类型的对象，
例如在某个文件夹中只能包含文本文件，使用组合模式时，不能依赖类型系统来施加这些约束，因为它们都来自于相同的抽象层，
在这种情况下，必须通过在运行时进行类型检查来实现，这个实现过程较为复杂。